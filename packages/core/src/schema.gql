# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PaginationResult {
  currentPage: Int!
  totalPages: Int!
}

type Role {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  isAdmin: Boolean!
  permissions: [Permission!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Permission {
  CreateUser
  ReadUser
  UpdateUser
  DeleteUser
  CreateRole
  ReadRole
  UpdateRole
  DeleteRole
  CreateProduct
  ReadProduct
  UpdateProduct
  DeleteProduct
  CreateCategory
  ReadCategory
  UpdateCategory
  DeleteCategory
  CreateAttribute
  ReadAttribute
  UpdateAttribute
  DeleteAttribute
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  role: Role!
}

type Attribute {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  values: [AttributeValue!]!
  languageCode: LanguageCode!
  name: String!
}

enum LanguageCode {
  EN
  LT
}

type AttributeValue {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  languageCode: LanguageCode!
  value: String!
}

type ValidationError {
  path: String!
  messages: [String!]!
}

type Category {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  active: Boolean!
  parent: Category
  children: [Category!]!
  languageCode: LanguageCode!
  name: String!
  slug: String!
}

type CategoryListResponse {
  items: [Category!]!
  totalItems: Int!
  pagination: PaginationResult!
}

type ProductTranslation {
  languageCode: LanguageCode!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String
}

type Product {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  variants: [ProductVariant!]!
  translations: ProductTranslation!
  languageCode: LanguageCode!
  name: String!
  slug: String!
  description: String
}

type ProductVariant {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  sku: String!
  price: Int!
  attributes: [Attribute!]!
}

type ProductListResponse {
  items: [Product!]!
  totalItems: Int!
  pagination: PaginationResult!
}

type RoleListResponse {
  items: [Role!]!
  totalItems: Int!
  pagination: PaginationResult!
}

type UserListResponse {
  items: [User!]!
  totalItems: Int!
  pagination: PaginationResult!
}

type Query {
  attribute(id: Int!): AttributeResponse!
  attributes: [Attribute!]!
  categoriesTree(id: Int): [Category!]!
  category(id: Int!): CategoryResponse!
  categories(filter: ExtendedCategoryFilterOptions!, sort: CategorySortOptions!, page: Int!, limit: Int!): CategoryListResponse!
  isCategorySlugAvailable(slug: String!): Boolean!
  getCategorySlug(name: String!): String!
  product(id: Int!): ProductResponse!
  products(filter: ExtendedProductFilterOptions!, sort: ProductSortOptions!, page: Int!, limit: Int!): ProductListResponse!
  user(id: Int!): UserResponse!
  users(filter: ExtendedUserFilterOptions!, sort: UserSortOptions!, page: Int!, limit: Int!): UserListResponse!
  userProfile: User
  roles(filter: ExtendedRoleFilterOptions!, sort: RoleSortOptions!, page: Int!, limit: Int!): RoleListResponse!
  role(id: Int!): RoleResponse!
}

union AttributeResponse = Attribute | ErrorResult

type ErrorResult {
  message: String!
  errorCode: String!
}

union CategoryResponse = Category | ErrorResult

input ExtendedCategoryFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
  _and: [CategoryFilterOptions!]
  _or: [CategoryFilterOptions!]
}

input NumberOperators {
  _gt: Float
  _lt: Float
  _eq: Float
  _in: [Float!]
  _nin: [Float!]
}

input DateOperators {
  _gte: DateTime
  _lte: DateTime
}

input StringOperators {
  _ilike: String
  _eq: String
}

input CategoryFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
}

input CategorySortOptions {
  id: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

union ProductResponse = Product | ErrorResult

input ExtendedProductFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
  description: StringOperators
  price: NumberOperators
  deletedAt: DateOperators
  _and: [ProductFilterOptions!]
  _or: [ProductFilterOptions!]
}

input ProductFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
  description: StringOperators
  price: NumberOperators
  deletedAt: DateOperators
}

input ProductSortOptions {
  id: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

union UserResponse = User | ErrorResult

input ExtendedUserFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  email: StringOperators
  firstname: StringOperators
  lastname: StringOperators
  deletedAt: DateOperators
  _and: [UserFilterOptions!]
  _or: [UserFilterOptions!]
}

input UserFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  email: StringOperators
  firstname: StringOperators
  lastname: StringOperators
  deletedAt: DateOperators
}

input UserSortOptions {
  id: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  email: SortOrder
}

input ExtendedRoleFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
  _and: [RoleFilterOptions!]
  _or: [RoleFilterOptions!]
}

input RoleFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
}

input RoleSortOptions {
  id: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

union RoleResponse = Role | ErrorResult

type Mutation {
  createAttributeValue(input: NewAttributeValueInput!): CreateAttributeValueResponse!
  updateAttributeValue(input: UpdateAttributeValueInput!, id: Int!): UpdateAttributeValueResponse!
  addAttributeValueTranslation(input: NewAttributeValueTranslationInput!): AddAttributeValueTranslationResponse!
  createAttribute(input: NewAttributeInput!): CreateAttributeResponse!
  updateAttribute(input: UpdateAttributeInput!, id: Int!): UpdateAttributeResponse!
  addAttributeTranslation(input: NewAttributeTranslationInput!): AddAttributeTranslationResponse!
  createCategory(input: NewCategoryInput!): CreateCategoryResponse!
  updateCategory(input: UpdateCategoryInput!, id: Int!): UpdateCategoryResponse!
  addCategoryTranslation(input: NewCategoryTranslationInput!): AddCategoryTranslationResponse!
  createProductVariant(input: NewProductVariantInput!): CreateProductVariantResponse!
  updateProductVariant(input: UpdateProductVariantInput!, id: Int!): UpdateProductVariantResponse!
  createProduct(input: NewProductInput!): CreateProductResponse!
  updateProduct(input: UpdateProductInput!, id: Int!): UpdateProductResponse!
  addProductTranslation(input: NewProductTranslationInput!): AddProductTranslationResponse!
  createUser(input: NewUserInput!): CreateUserResponse!
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfileResponse!
  updateUser(input: UpdateUserInput!, id: Int!): UpdateUserResponse!
  userLogin(input: NativeAuthInput!): UserLoginResponse!
  userLogout: Boolean!
  createRole(input: NewRoleInput!): CreateRoleResponse!
  updateRole(input: UpdateRoleInput!, id: Int!): UpdateRoleResponse!
}

union CreateAttributeValueResponse = AttributeValue | InputValidationError

type InputValidationError {
  message: String!
  errorCode: String!
  errors: [ValidationError!]!
}

input NewAttributeValueInput {
  attributeId: Int!
  value: String!
}

union UpdateAttributeValueResponse = AttributeValue | InputValidationError | ErrorResult

input UpdateAttributeValueInput {
  value: String
}

union AddAttributeValueTranslationResponse = AttributeValueTranslation | InputValidationError | ErrorResult

type AttributeValueTranslation {
  languageCode: LanguageCode!
  updatedAt: DateTime!
  value: String!
}

input NewAttributeValueTranslationInput {
  attributeValueId: Int!
  value: String!
}

union CreateAttributeResponse = Attribute | InputValidationError

input NewAttributeInput {
  name: String!
}

union UpdateAttributeResponse = Attribute | InputValidationError | ErrorResult

input UpdateAttributeInput {
  name: String
}

union AddAttributeTranslationResponse = AttributeTranslation | InputValidationError | ErrorResult

type AttributeTranslation {
  languageCode: LanguageCode!
  updatedAt: DateTime!
  name: String!
}

input NewAttributeTranslationInput {
  name: String!
  attributeId: Int!
}

union CreateCategoryResponse = Category | InputValidationError

input NewCategoryInput {
  name: String!
  slug: String
  active: Boolean!
  parentId: Int
}

union UpdateCategoryResponse = Category | InputValidationError | ErrorResult

input UpdateCategoryInput {
  name: String
  slug: String
  active: Boolean
  parentId: Int
}

union AddCategoryTranslationResponse = CategoryTranslation | InputValidationError | ErrorResult

type CategoryTranslation {
  languageCode: LanguageCode!
  updatedAt: DateTime!
  name: String!
  slug: String!
}

input NewCategoryTranslationInput {
  name: String!
  slug: String
  categoryId: Int!
}

union CreateProductVariantResponse = ProductVariant | InputValidationError

input NewProductVariantInput {
  productId: Int!
  price: Int!
  sku: String!
  attributesValuesIds: [Int!]!
}

union UpdateProductVariantResponse = ProductVariant | InputValidationError | ErrorResult

input UpdateProductVariantInput {
  productId: Int
  price: Int
  sku: String
  attributesValuesIds: [Int!]
}

union CreateProductResponse = Product | InputValidationError

input NewProductInput {
  name: String!
  slug: String
  description: String
  categoryId: Int!
}

union UpdateProductResponse = Product | InputValidationError | ErrorResult

input UpdateProductInput {
  name: String
  slug: String
  description: String
  categoryId: Int
}

union AddProductTranslationResponse = ProductTranslation | InputValidationError | ErrorResult

input NewProductTranslationInput {
  name: String!
  slug: String
  description: String
  productId: Int!
}

union CreateUserResponse = User | InputValidationError

input NewUserInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  roleId: Int!
}

union UpdateUserProfileResponse = User | InputValidationError

input UpdateUserProfileInput {
  firstname: String
  lastname: String
  email: String
  password: String
  currentPassword: String!
}

union UpdateUserResponse = User | InputValidationError | ErrorResult

input UpdateUserInput {
  firstname: String
  lastname: String
  email: String
  password: String
  roleId: Int
}

union UserLoginResponse = User | ErrorResult

input NativeAuthInput {
  email: String!
  password: String!
}

union CreateRoleResponse = Role | InputValidationError

input NewRoleInput {
  name: String!
  permissions: [Permission!]!
}

union UpdateRoleResponse = Role | InputValidationError | ErrorResult

input UpdateRoleInput {
  name: String
  permissions: [Permission!]
}
