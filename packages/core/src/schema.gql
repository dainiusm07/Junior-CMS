# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PaginationResult {
  currentPage: Int!
  totalPages: Int!
}

type Role {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  permissions: [Permission!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Permission {
  CreateUser
  ReadUser
  UpdateUser
  DeleteUser
  CreateRole
  ReadRole
  UpdateRole
  DeleteRole
  CreateProduct
  ReadProduct
  UpdateProduct
  DeleteProduct
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  role: Role!
}

type ValidationError {
  path: String!
  messages: [String!]!
}

type UserListResponse {
  items: [User!]!
  totalItems: Int!
  pagination: PaginationResult!
}

type RoleListResponse {
  items: [Role!]!
  totalItems: Int!
  pagination: PaginationResult!
}

type Product {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  name: String!
  description: String
  price: Int!
}

type ProductListResponse {
  items: [Product!]!
  totalItems: Int!
  pagination: PaginationResult!
}

type Query {
  product(id: Int!): ProductResponse!
  products(filter: ExtendedProductFilterOptions, sort: ProductSortOptions, page: Int!, limit: Int!): ProductListResponse!
  user(id: Int!): UserResponse!
  users(filter: ExtendedUserFilterOptions, sort: UserSortOptions, page: Int!, limit: Int!): UserListResponse!
  userProfile: User
  roles(filter: ExtendedRoleFilterOptions, sort: RoleSortOptions, page: Int!, limit: Int!): RoleListResponse!
  role(id: Int!): RoleResponse!
}

union ProductResponse = Product | NotFoundError

type NotFoundError {
  message: String!
  errorCode: String!
}

input ExtendedProductFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
  description: StringOperators
  price: NumberOperators
  deletedAt: DateOperators
  _and: [ProductFilterOptions!]
  _or: [ProductFilterOptions!]
}

input NumberOperators {
  _gt: Float
  _lt: Float
  _eq: Float
  _in: [Float!]
  _nin: [Float!]
}

input DateOperators {
  _gte: DateTime
  _lte: DateTime
}

input StringOperators {
  _ilike: String
  _eq: String
}

input ProductFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
  description: StringOperators
  price: NumberOperators
  deletedAt: DateOperators
}

input ProductSortOptions {
  id: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

union UserResponse = User | NotFoundError

input ExtendedUserFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  email: StringOperators
  firstname: StringOperators
  lastname: StringOperators
  deletedAt: DateOperators
  _and: [UserFilterOptions!]
  _or: [UserFilterOptions!]
}

input UserFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  email: StringOperators
  firstname: StringOperators
  lastname: StringOperators
  deletedAt: DateOperators
}

input UserSortOptions {
  id: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  email: SortOrder
}

input ExtendedRoleFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
  _and: [RoleFilterOptions!]
  _or: [RoleFilterOptions!]
}

input RoleFilterOptions {
  id: NumberOperators
  updatedAt: DateOperators
  createdAt: DateOperators
  name: StringOperators
}

input RoleSortOptions {
  id: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

union RoleResponse = Role | NotFoundError

type Mutation {
  createProduct(input: NewProductInput!): CreateProductResponse!
  updateProduct(input: UpdateProductInput!, id: Int!): UpdateProductResponse!
  createUser(input: NewUserInput!): CreateUserResponse!
  updateUser(input: UpdateUserInput!, id: Int!): UpdateUserResponse!
  userLogin(input: NativeAuthInput!): User
  userLogout: Boolean!
  createRole(input: NewRoleInput!): CreateRoleResponse!
  updateRole(input: UpdateRoleInput!, id: Int!): UpdateRoleResponse!
}

union CreateProductResponse = Product | InputValidationError

type InputValidationError {
  message: String!
  errorCode: String!
  errors: [ValidationError!]!
}

input NewProductInput {
  name: String!
  description: String
  price: Int!
}

union UpdateProductResponse = Product | InputValidationError | NotFoundError

input UpdateProductInput {
  name: String
  description: String
  price: Int
}

union CreateUserResponse = User | InputValidationError

input NewUserInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  roleId: Int!
}

union UpdateUserResponse = User | InputValidationError | NotFoundError

input UpdateUserInput {
  firstname: String
  lastname: String
  email: String
  password: String
  roleId: Int
}

input NativeAuthInput {
  email: String!
  password: String!
}

union CreateRoleResponse = Role | InputValidationError

input NewRoleInput {
  name: String!
  permissions: [Permission!]!
}

union UpdateRoleResponse = Role | InputValidationError | NotFoundError

input UpdateRoleInput {
  name: String
  permissions: [Permission!]
}
